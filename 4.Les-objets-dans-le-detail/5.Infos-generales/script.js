/*
    1. Le mot cl√© delete.

    On peut supprimer une propri√©t√© d'un objet √† l'aide du mot cl√© delete.
*/

const city = {
    name: 'Bratislava',
    population: 424000,
};

console.log(city);
delete city.name;
console.log(city);

/* Attention, utiliser delete avec la propri√©t√© d'un tableau va remplacer l'√©l√©ment supprim√© par un √©l√©ment empty */
const array = [1, 2, 3, 4, 5];
delete array[0];
console.log(array);

/* 
    2. Bracket et dot notation.

    On peut s√©lectionner des propri√©t√©s en utilisant deux notations.
   
    A. Le point : obj.prop
    La dot notation, en utilisant directement le nom d'une propri√©t√©.
    La dot notation n'est pas disponible avec une cha√Æne de caract√®re ou un nombre, dans ce cas il faut utiliser la bracket notation.

    B. Les crochets [] : obj["prop"]
    C'est la bracket notation.
    Si vous utilisez un autre type qu'une cha√Æne entre les crochets, il sera converti en cha√Æne. obj[1] donnera obj["1"]

*/

const dog = {
    name: 'Riki',
    legs: 4,
    10: 9999,
};

console.log(dog.name);
console.log(dog['10']);

/* 
    3. Form raccourcie des m√©thodes.

    On peut utiliser des fonctions classiques et les fonctions fl√©ch√©es dans les objets, voyons ensemble les diff√©rentes syntaxes.
*/
const robot = {
    // Fonction classique
    aim: function () {
        console.log('Aiming');
    },

    // Fonction classique raccourcie
    shot() {
        console.log('Shooting');
    },

    // Fonction fl√©ch√©e
    move: () => {
        console.log('Moving');
    },
};

/* 
    4. Les tableaux sont des objets.

    Les tableaux sont des objets sp√©ciaux permettant de manipuler plusieurs valeurs facilement et contenant toute une flopp√©e de m√©thodes tr√®s pratiques.

    Chaque √©l√©ment est accessible par son index, nous sommes donc en pr√©sence d'une propri√©t√© - valeur. 

    Cela ressemble beaucoup √† un objet n'est-ce pas ?
    [
      0: "üçì",
      1: "üçå",
      2: "üçá"
    ]

    Ils ont √©galement une propri√©t√© length.
    On acc√®de aux propri√©t√©s d'un tableau via la bracket notation, avec des nombres (les index).

*/

const fruits = ['üçì', 'üçå', 'üçá'];
console.log(fruits);
console.log(typeof fruits);
console.log(fruits.length);
console.log(fruits[0], fruits['1']);
fruits.test = 'nouveau ';
console.log(fruits);
console.log(fruits.test);

/* 
    5. Les fonctions sont des objets.

    En JavaScript, on dit que les fonctions sont des first-class objets, car elles peuvent √™tre appel√©es, pass√©es √† d'autres fonctions(param√®tres-arguments), et quelles contiennent aussi des propri√©t√©s.
    Les fonctions sont des objets cr√©√©s √† partir du constructeur Function.

*/
function foo() {
    console.log('hello');
}
// Ajout d'une propri√©t√© √† la fonction foo
foo.customProp = 'customProp';
console.dir(foo);
