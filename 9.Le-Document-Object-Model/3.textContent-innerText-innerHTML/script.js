/* 
    Ces trois propri√©t√©s pratiques se ressemblent, mais il faut bien comprendre leurs diff√©rences.
*/

//* S√©lection du container
const container = document.querySelector('.container');

//* S√©lection du titre
const title = document.querySelector('h2');

// console.log(container, title);

//* Element : innerHTML = string
/* 
    Transforme la cha√Æne de caract√®res fournie en √©l√©ments HTML si la syntaxe est respect√©e.
    Rajoute du texte au contenu d'un √©l√©ment si la cha√Æne fournie n'est pas au format HTML. 
*/
//!    Cette propri√©t√© comporte des risques si elle est mal utilis√©e.N

//* Rajoute un √©l√©ment HMTL dans l'√©l√©ment container.
// container.innerHTML = "<input type='text' />";

//* Retourne le contenu interne de container.
// container.innerHTML = 'Nouveau texte !';

//* Element : textContent
/* 
    Retourne ou modifie le texte √† l'int√©rieur d'un √©l√©ment.
    Retournera √©galement le contenu en "visibility: hidden;", contrairement √† innerText.
*/
//* Retourne le texte √† l'int√©rieur de container, cach√© ou pas.
// console.log('textContent du container : ', container.textContent);

//* Change le texte √† l'int√©rieur de container
container.textContent = 'Nouveau texte ! üòÅ';

//* Element : innerText
/* 
    Retourne ou modifie le texte √† l'int√©rieur d'un √©l√©ment.
    Retournera seulement le texte visible, non-dissimul√© par visibility: hidden.
*/

// Retourne seulement le texte visible
console.log('innerText du container : ', container.innerText);

//! De la dangerosit√© d'innerHTML.
/* 
     Il ne faut jamais transformer en HTML des donn√©es qu'on re√ßoit d'une source non-s√ªre.

    Par pr√©vention, HTML n'ex√©cute pas un "<script></script>"" avec innerHTML.

    Par exemple : body.innerHTML = "<script>alert("script malicieux)</script>" // ne fonctionne pas.

    Mais il existe d'autres fa√ßons d'ex√©cuter du JS, comme par exemple avec ... l'√©l√©ment <img> !

    `<img src='1' onerror='alert("Error loading image")'>`;
*/

//* textContent vs innerText
/* 
    Une petite guerre existe pour savoir s'il faut utiliser textContent ou innerText.
    Il y a certes, certaines diff√©rences entre les deux, mais vous pouvez la plupart du temps les utiliser de mani√®re interchangeable.
    Je vous conseille d'utiliser textContent qui est en g√©n√©ral plus accept√©e.
*/
